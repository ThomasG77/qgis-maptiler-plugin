# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MapTiler
                                 A QGIS plugin
 Show MapTiler cloud maps.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-04-02
        git sha              : $Format:%H$
        copyright            : (C) 2020 by MapTiler AG
        email                : sales@maptiler.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os.path
import json
import re

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QModelIndex, QMetaObject
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QDockWidget, QCompleter, QLineEdit
from qgis.core import *

from .browser_root_collection import DataItemProvider
from .geocoder import MapTilerGeocoderToolbar


class MapTiler:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        self.proj = QgsProject.instance()

        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'MapTiler_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&MapTiler')

        # init Geocoding Toolbar
        self.gc_toolbar = MapTilerGeocoderToolbar(self.iface)

        self.pluginIsActive = False

        self._default_copyright = QgsProject.instance(
        ).readEntry("CopyrightLabel", "/Label")[0]

    # noinspection PyMethodMayBeStatic

    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('MapTiler', message)

    def initGui(self):
        # add MapTiler Collection to Browser
        self.dip = DataItemProvider()
        QgsApplication.instance().dataItemProviderRegistry().addProvider(self.dip)

        self._activate_copyrights()

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        # remove MapTiler Collection to Browser
        QgsApplication.instance().dataItemProviderRegistry().removeProvider(self.dip)
        self.dip = None

        # remove the toolbar
        del self.gc_toolbar

        self._deactivate_copyrights()

    def _activate_copyrights(self):
        self.iface.layerTreeView().clicked.connect(
            self._write_copyright_entries)
        self.iface.layerTreeView().currentLayerChanged.connect(
            self._write_copyright_entries)
        self.proj.layersAdded.connect(self._write_copyright_entries)
        self.proj.layersRemoved.connect(self._write_copyright_entries)

    def _deactivate_copyrights(self):
        self.iface.layerTreeView().clicked.disconnect(
            self._write_copyright_entries)
        self.iface.layerTreeView().currentLayerChanged.disconnect(
            self._write_copyright_entries)
        self.proj.layersAdded.disconnect(self._write_copyright_entries)
        self.proj.layersRemoved.disconnect(self._write_copyright_entries)
        QgsProject.instance().writeEntry(
            "CopyrightLabel", "/Label", self._default_copyright)
        QgsProject.instance().writeEntry("CopyrightLabel", "/Enabled", False)
        QMetaObject.invokeMethod(
            self.iface.mainWindow(), "projectReadDecorationItems")
        self.iface.mapCanvas().refresh()

    def _write_copyright_entries(self):
        copyrights_text = self._parse_copyrights()
        # when no active MapTiler layer
        if copyrights_text == '':
            copyrights_text = self._default_copyright
            QgsProject.instance().writeEntry("CopyrightLabel", "/Label", copyrights_text)
            QgsProject.instance().writeEntry("CopyrightLabel", "/Enabled", False)

        else:
            QgsProject.instance().writeEntry("CopyrightLabel", "/Label", copyrights_text)
            QgsProject.instance().writeEntry("CopyrightLabel", "/Enabled", True)
        QgsProject.instance().writeEntry("CopyrightLabel", "/MarginH", 1)
        QgsProject.instance().writeEntry("CopyrightLabel", "/MarginV", 1)
        QMetaObject.invokeMethod(
            self.iface.mainWindow(), "projectReadDecorationItems")
        self.iface.mapCanvas().refresh()

    def _parse_copyrights(self):
        copyrights = []
        root_group = self.iface.layerTreeView().layerTreeModel().rootGroup()
        for l in root_group.findLayers():
            if l.isVisible():
                attribution = l.layer().attribution()
                attribution = re.sub(
                    '<a.*?>|</a>', '', attribution).replace('&copy;', '©').replace('©', '!!!©')
                parsed_attributions = attribution.split('!!!')
                for attr in parsed_attributions:
                    if attr == '':
                        continue

                    if not attr in copyrights:
                        copyrights.append(attr)

        return ' '.join(copyrights)

    # --------------------------------------------------------------------------
